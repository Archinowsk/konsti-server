Resources:
  sslSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {"Fn::GetAtt" : ["AWSEBSecurityGroup", "GroupId"]}
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      CidrIp: 0.0.0.0/0

files:
  /etc/nginx/conf.d/000_http_redirect_custom.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      server {
        listen 8080;
        server_name localhost;

        location /.well-known {
          # Certbot root
          alias /var/www/html/.well-known;
        }

        location / {
          return 301 https://$host$request_uri;
        }
      }

  /etc/nginx/conf.d/https_custom.pre:
    mode: "000644"
    owner: root
    group: root
    content: |
      upstream nodejs {
          server 127.0.0.1:8081;
          keepalive 256;
      }
      # HTTPS server
      server {
        listen       443 ssl http2 default;
        server_name  localhost;
        error_page  497 https://$host$request_uri;

        if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
          set $year $1;
          set $month $2;
          set $day $3;
          set $hour $4;
        }
        access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour healthd;
        access_log  /var/log/nginx/access.log  main;

        ssl_certificate      /etc/letsencrypt/live/ebcert/fullchain.pem;
        ssl_certificate_key  /etc/letsencrypt/live/ebcert/privkey.pem;
        ssl_session_timeout  5m;
        ssl_protocols  TLSv1.1 TLSv1.2;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_prefer_server_ciphers   on;
        if ($ssl_protocol = "") {
          rewrite ^ https://$host$request_uri? permanent;
        }

        gzip on;
        gzip_comp_level 4;
        gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

        location / {
            proxy_pass  http://nodejs;
            proxy_set_header   Connection "";
            proxy_http_version 1.1;
            proxy_set_header        Host            $host;
            proxy_set_header        X-Real-IP       $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Upgrade         $http_upgrade;
            proxy_set_header        Connection      "Upgrade";
        }
      }

  # Cron to renew cert
  "/etc/cron.d/certbot_renew":
    mode: "000644"
    owner: root
    group: root
    content: |
      @weekly root /usr/local/bin/certbot-auto renew

  "/opt/elasticbeanstalk/hooks/appdeploy/post/100_install_cert_bot.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      echo "Instaling CERTBOT"

      wget https://dl.eff.org/certbot-auto
      mv certbot-auto /usr/local/bin/certbot-auto
      chown root /usr/local/bin/certbot-auto
      chmod 0755 /usr/local/bin/certbot-auto

      echo "CERTBOT installed."

  "/opt/elasticbeanstalk/hooks/appdeploy/post/101_configure_cert.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      source /etc/environment
      echo "Configuring CERTBOT for domains: ${LETSENCRYPT_DOMAINS}";

      certbot_command="/usr/local/bin/certbot-auto certonly --webroot --webroot-path /var/www/html --debug --non-interactive --email ${LETSENCRYPT_EMAIL} --agree-tos --keep-until-expiring"
      for domain in $(echo $LETSENCRYPT_DOMAINS | sed "s/,/ /g")
      do
        echo "Creating command for domain: $domain"
        certbot_command="$certbot_command -d $domain"
      done
      echo "Command to be runned: $certbot_command"

      echo "Restarting nginx"
      /etc/init.d/nginx restart

      echo "Running CERTBOT"
      eval $certbot_command
      echo "CERTBOT configured.";

  "/opt/elasticbeanstalk/hooks/appdeploy/post/102_link_cert.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      source /etc/environment
      domain="$( cut -d ',' -f 1 <<< "$LETSENCRYPT_DOMAINS" )";
      if [ -d /etc/letsencrypt/live ]; then
        echo "letsencrypt/live exists";
        domain_folder_name="$(ls /etc/letsencrypt/live | sort -n | grep $domain | head -1)";
        echo "domain_folder_name is $domain_folder_name";
        if [ -d /etc/letsencrypt/live/${domain_folder_name} ]; then
          echo "Creating sym link";
          ln -sfn /etc/letsencrypt/live/${domain_folder_name} /etc/letsencrypt/live/ebcert
        fi
      fi

  "/opt/elasticbeanstalk/hooks/appdeploy/post/103_https_config.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      rm -f /etc/nginx/conf.d/https_custom.conf
      mv /etc/nginx/conf.d/https_custom.pre /etc/nginx/conf.d/https_custom.conf

  "/opt/elasticbeanstalk/hooks/appdeploy/post/104_remove_old_configs.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      if [ -f /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf ]; then
        echo "Moving /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf to .bak";
        rm -rf /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf.bak
        mv /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf.bak
      fi

  "/opt/elasticbeanstalk/hooks/appdeploy/post/105_restart_nginx.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      /etc/init.d/nginx restart

packages:
  yum:
    epel-release: []

container_commands:
  10_export_letsencrypt_domains_env:
    command: |
      rm /etc/environment
      grep -qxF LETSENCRYPT_DOMAINS="${LETSENCRYPT_DOMAINS}" /etc/environment || echo LETSENCRYPT_DOMAINS="${LETSENCRYPT_DOMAINS}" >> /etc/environment
      grep -qxF LETSENCRYPT_EMAIL="${LETSENCRYPT_EMAIL}" /etc/environment || echo LETSENCRYPT_EMAIL="${LETSENCRYPT_EMAIL}" >> /etc/environment
